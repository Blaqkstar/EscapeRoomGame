Index: src/dev/java/game/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\nimport java.sql.Connection;\r\nimport java.util.*;\r\n\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\npublic class Main{\r\n    public static void main(final String[] args) throws Exception {\r\n        final Logger log = LogManager.getLogger(Main.class.getName());\r\n        ScoreDB scoreDB = new ScoreDB();\r\n        // starts background music before the game loop to ensure that it plays in the background while the game is running\r\n        Thread musicThread = new Thread(new BackgroundMusic(\"resources/music/bgmusic.wav\")); // sets up thread and defines a filepath\r\n        musicThread.start(); // begins music\r\n        // this is going to read user input\r\n        Scanner scanner = new Scanner(System.in);\r\n        String input;\r\n\r\n        // this loops until the user types 'exit'\r\n        do {\r\n            ///  moved these inside of the main loop. Might alleviate the need for caching a lot of the stuff we were going to have to in order to create a restart() method\r\n            ///  YEP, I THINK THIS RESOLVED THE ISSUE. WE MIGHT NOT NEED THAT RESTART() METHOD AT ALL NOW. WORTH SOME TESTING ON BUT PRELIM TESTS ARE GOOD.\r\n            // prints game title\r\n            printTitle();\r\n            // Create list of rooms\r\n            ArrayList<Room> rooms = new ArrayList<Room>();\r\n            int gameOverScore = 0; // sets gameOverScore to 0 at the top of the loop instead of outside of it\r\n            // Create tutorial room using SetNewRoom\r\n            Room room = SetNewRoom(log, \"Tutorial Room\");\r\n            //You could loop this and have an infinite number of rooms\r\n            //Check out the RoomSetup Class for how it works!\r\n            rooms.add(room);\r\n\r\n            // Welcome message\r\n            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": Shadows encapsulate your ephemeral form. In the distance, a dim candle flickers, suspended by some unknown force. \" +\r\n                    \"As you approach, transfixed, a quiet voice beckons...\");\r\n            System.out.println();\r\n            Thread.sleep(1300);\r\n            System.out.println(ConsoleColors.GREEN+\"DISEMBODIED VOICE: \"+ConsoleColors.RESET+\"'... Who are you?' \");\r\n            System.out.print(ConsoleColors.YELLOW+\"Enter your name: \"+ConsoleColors.RESET);\r\n            Thread.sleep(300);\r\n            String playerName = scanner.nextLine(); // collects player name\r\n            // instantiates player\r\n            Player player = new Player(playerName, 0);\r\n\r\n            /// player.getUpperName uses our function and unaryOperator examples\r\n            System.out.println();\r\n            System.out.println(ConsoleColors.GREEN+\"DISEMBODIED VOICE: \"+ConsoleColors.RESET+\"'\"+player.getUpperName() + \"... I do not know you...' \");\r\n            Thread.sleep(500);\r\n            playIntro(); /// plays narrative intro\r\n            gameOverScore = setGameOverScore(room); // setsGameOverScore\r\n\r\n            // this one loops until gameOverScore has been reached\r\n            do {\r\n                System.out.println();\r\n                System.out.print(ConsoleColors.YELLOW+\"Enter input (or 'help' for a list of available commands): \"+ConsoleColors.RESET);\r\n                input = scanner.nextLine(); // user input\r\n                log.debug(ConsoleColors.PURPLE+\"user input received\"+ConsoleColors.RESET);\r\n\r\n                // processes user input\r\n                /// ------------------------------------------------{ LOOK ACTION HANDLER }--------------------\r\n                if (input.startsWith(\"look \")) {\r\n                    log.debug(ConsoleColors.PURPLE+\"player selected look\"+ConsoleColors.RESET);\r\n                    System.out.println();\r\n                    final String[] parts = input.split(\" \"); // splits input into parts, storing in an array\r\n                    if (parts.length == 2) { // ensures that input consists of two parts\r\n                        try {\r\n                            final Direction direction = Direction.valueOf(parts[1].toLowerCase()); // gets direction\r\n\r\n                            if (!room.getItemsAtDirection(direction).isEmpty()) {\r\n                                // Set all items in this direction to observed\r\n                                for (Item item : room.getItemsAtDirection(direction)) {\r\n                                    item.setObserved(true);\r\n                                }\r\n                                // displays item in chosen direction\r\n                                System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You look \" + direction.getDescription() + \" and see \" + room.describeItemsToPlayer(room.getItemsAtDirection(direction)));\r\n                            }\r\n                            else{\r\n                                System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You look \" + direction.getDescription() + \" and see a blank wall\");\r\n                            }\r\n                            player.setScore(player.getScore() + 1); // successful action increments player score by one\r\n                        } catch (IllegalArgumentException e) {\r\n                            System.out.println(\"Invalid direction. Please enter one of the following: north, south, east, west.\"); // handles input issues\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"Invalid input. Please use the format 'look <direction>'.\"); // handles formatting issues\r\n                    }\r\n                    /// ------------------------------------------------{INSPECT ACTION HANDLER}--------------------\r\n                } else if(input.startsWith(\"inspect \")) {\r\n                    log.debug(ConsoleColors.PURPLE+\"player selected inspect\"+ConsoleColors.RESET);\r\n                    System.out.println();\r\n                    final String[] parts = input.split(\" \"); // splits input into parts, storing in an array\r\n                    if (parts.length == 2) { // ensures that input consists of two parts\r\n                        try {\r\n                            // declare item that is being inspected\r\n                            Item item = room.getItems().get(parts[1].toLowerCase());\r\n                            // Check if player has observed the item yet\r\n                            if (item.isObserved()) {\r\n                                System.out.print(item.getInspection());\r\n                                System.out.println();\r\n                            }\r\n                            else{\r\n                                System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You do not see any \" + parts[1]);\r\n                            }\r\n                            player.setScore(player.getScore() + 1); // successful action increments player score by one\r\n                        }\r\n                        // Handles input of unknown item\r\n                        catch (Exception e) {\r\n                            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You do not see any \" + parts[1]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        System.out.println(\"Invalid input. Please use the format 'inspect <item>'.\"); // handles formatting issues\r\n                    }\r\n                }\r\n                /// ------------------------------------------------{ USE ACTION HANDLER }--------------------\r\n                else if (input.startsWith(\"use \")) {\r\n                    log.debug(ConsoleColors.PURPLE+\"player selected use\"+ConsoleColors.RESET);\r\n                    final String[] parts = input.split(\" \"); // splits input into parts, storing in an array\r\n                    if (parts.length == 2) { // ensures that input consists of two parts\r\n                        try {\r\n                            // normalizes input to lowercase and trims whitespace\r\n                            String itemName = parts[1].trim().toLowerCase();\r\n                            log.debug(ConsoleColors.PURPLE+\"Searching for item with key '\" + itemName + \"'\"+ConsoleColors.RESET); // for debug purposes\r\n\r\n                            // Allow player to use transmorgrifer by calling it a \"machine\"\r\n                            if (itemName.equalsIgnoreCase(\"machine\")) {itemName=\"transmorgrifier\";}\r\n\r\n                            ///  DEBUG MESSAGES BEGIN\r\n                            // declare item that is being inspected\r\n                            Item item = room.getItems().get(itemName);\r\n                            if (item != null) {\r\n                                log.debug(ConsoleColors.PURPLE+\"Found item '\" + item.getName() + \"'\"+ConsoleColors.RESET);\r\n                                System.out.println();\r\n                            } else {\r\n                                log.debug(ConsoleColors.PURPLE+\"Item not found in room's items map\"+ConsoleColors.RESET);\r\n                                System.out.println();\r\n                            }\r\n                            ///  DEBUG MESSAGES END\r\n                            // Check if player has observed the item yet\r\n                            if (item != null && item.isObserved()) {\r\n                                ///  ------ BEGIN NEW ITEM HANDLING\r\n                                /// -------------------------------------------------------------{ KEY USE HANDLER } ----------------------------------------\r\n                                if (item instanceof Key) {\r\n                                    if (room.GetExitDoor().isObserved()) {\r\n                                        item.use(); // uses the key\r\n                                        room.GetExitDoor().unlockDoor(); // unlocks the door\r\n                                    } else {\r\n                                        System.out.println(ConsoleColors.GREEN + \"PERCEPTION\" + ConsoleColors.RESET + \": You have not seen anything to unlock\");\r\n                                    }\r\n                                }\r\n                                /// -------------------------------------------------------------{ LEVER USE HANDLER } ----------------------------------------\r\n                                else if (item instanceof Lever) {\r\n                                    item.use(); // toggles lever\r\n                                }\r\n                                // handles other items\r\n                                /// -------------------------------------------------------------{ DEFAULT USE HANDLER } ----------------------------------------\r\n                                else {\r\n                                    item.use(); // default use behavior\r\n                                }\r\n                                player.setScore(player.getScore() + 1); // successful action of any kind increments player score by one\r\n                                ///  ------ END NEW ITEM HANDLING\r\n                            /*if (item.getName().equals(\"key\")) {\r\n\r\n                                if (room.GetExitDoor().isObserved()) {\r\n                                    item.use();\r\n                                    room.GetExitDoor().unlockDoor();\r\n                                }\r\n                                else{\r\n                                    System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You have not seen anything to unlock\");\r\n                                }\r\n                            }\r\n                            else{\r\n                                item.use();\r\n                            }*/\r\n                            }\r\n                            else{\r\n                                System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You do not see any \" + parts[1]);\r\n                            }\r\n                        }\r\n                        // Handles input of unknown item\r\n                        catch (Exception e) {\r\n                            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\":You do not see any \" + parts[1]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        System.out.println(\"Invalid input. Please use the format 'use <item>'.\"); // handles formatting issues\r\n                    }\r\n                }\r\n                /// ------------------------------------------------{ OPEN ACTION HANDLER }--------------------\r\n                else if (input.startsWith(\"open \")) {\r\n                    log.debug(ConsoleColors.PURPLE+\"player selected open\"+ConsoleColors.RESET);\r\n                    System.out.println();\r\n                    final String[] parts = input.split(\" \"); // splits input into parts, storing in an array\r\n                    if (parts.length == 2) { // ensures that input consists of two parts\r\n                        try {\r\n                            if (parts[1].equals(\"door\")) {\r\n                                // if player has observed the door\r\n                                if(room.GetExitDoor().isObserved()) {\r\n                                    // if door is not locked and not locked forever\r\n                                    if (!room.GetExitDoor().getIsLocked() && !room.GetExitDoor().getLockedForever()) {\r\n                                        // recoups points to player relative to the predetermined par for the room they're leaving\r\n                                        player.setScore(player.getScore() - room.getRoomPar());\r\n                                        /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR\r\n                                        if (room.getName().equalsIgnoreCase(\"Tutorial Room\")) {\r\n                                            room = SetNewRoom(log, \"The Conservatory\");\r\n                                        } else if (room.getName().equalsIgnoreCase(\"The Conservatory\")) {\r\n                                            room = SetNewRoom(log, \"The Lab\");\r\n\r\n                                            ///  TODO: Create the room that the Lab leads to\r\n                                        } else if (room.getName().equalsIgnoreCase(\"The Lab\")) {\r\n                                            room = SetNewRoom(log, \"Undefined\");\r\n                                        }\r\n                                        System.out.println(ConsoleColors.RED+ \"ACTION\" +ConsoleColors.RESET+\": You open the door and enter a new room. Welcome to \" + room.getName());\r\n                                        System.out.println();\r\n                                        Thread.sleep(300);\r\n                                        // room intro blurb dependent on the room being entered. Tutorial room intro handled at start of main()\r\n                                        if (room.getName().equalsIgnoreCase(\"The Conservatory\")) {\r\n                                            // prints conservatory intro\r\n                                            System.out.println(room.getIntroBlurb());\r\n                                        } else if (room.getName().equalsIgnoreCase(\"The Lab\")) {\r\n                                            System.out.println(room.getIntroBlurb());\r\n\r\n                                            ///  TODO: Change condition to fourth room name\r\n                                        } else if (room.getName().equalsIgnoreCase(\"Undefined\")) {\r\n                                            System.out.println(room.getIntroBlurb());\r\n                                        }\r\n                                    }\r\n                                    else{\r\n                                        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The door is locked\");\r\n                                    }\r\n                                }\r\n                                else{\r\n                                    System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You do not see any \" + parts[1]);\r\n                                }\r\n                            }\r\n                            player.setScore(player.getScore() + 1); // successful action increments player score by one\r\n                        } catch(Exception e){\r\n                            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You do not see any \" + parts[1]);\r\n                        }\r\n                    }\r\n                }\r\n                /// SPEEDRUN OPTIONS --------ONLY FOR USE IN DEVELOPMENT-----------------------\r\n                else if (input.equalsIgnoreCase(\"speedrun to lab\")){\r\n                    room = SetNewRoom(log, \"The Lab\"); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR\r\n                    System.out.println(ConsoleColors.RED+ \"ACTION\" +ConsoleColors.RESET+\": You open the door and enter a new room. Welcome to \" + room.getName());\r\n                }\r\n                else if (input.equalsIgnoreCase(\"speedrun to conservatory\")){\r\n                    room = SetNewRoom(log, \"The Conservatory\"); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR\r\n                    System.out.println(ConsoleColors.RED+ \"ACTION\" +ConsoleColors.RESET+\": You open the door and enter a new room. Welcome to \" + room.getName());\r\n                    System.out.println();\r\n                    System.out.println(room.getIntroBlurb());\r\n                }\r\n                /// ------------------------------------------------{ HELP ACTION HANDLER }--------------------\r\n                else if (input.equalsIgnoreCase(\"help\") || input.equalsIgnoreCase(\"?\")) {\r\n                    printCommands();\r\n                }\r\n                else if (input.equalsIgnoreCase(\"score\")) {\r\n                    printScore(player);\r\n                }\r\n                /// ------------------------------------------------{ HISCORES ACTION HANDLER }--------------------\r\n                else if (input.equalsIgnoreCase(\"hiscores\")) {\r\n                    printHiScores(scoreDB);\r\n                }\r\n                /// ------------------------------------------------{ ABOUT ACTION HANDLER }--------------------\r\n                else if (input.equalsIgnoreCase(\"about\")) {\r\n                    printAboutInfo();\r\n                }\r\n                else if (!input.equalsIgnoreCase(\"exit\")) { // handles incorrect commands\r\n                    System.out.println(\"Unknown input. Please enter 'look <direction>' or 'exit'.\");\r\n                }\r\n            } while (player.getScore() < gameOverScore); // basic lose conditions\r\n            if (player.getScore() >= gameOverScore) {\r\n                gameOver(player);\r\n            }\r\n            do {\r\n                System.out.print(ConsoleColors.YELLOW+\"Would you like to play again? (Y / N): \"+ConsoleColors.RESET);\r\n                input = scanner.nextLine().trim().toLowerCase(); // collects player choice\r\n            } while (!input.equalsIgnoreCase(\"y\") && !input.equalsIgnoreCase(\"n\"));\r\n            if (input.equalsIgnoreCase(\"n\")) {\r\n                input = \"exit\"; // exits game\r\n            }\r\n            System.out.println();\r\n            System.out.println();\r\n            // else loop repeats due to intrinsic do-while rules\r\n        } while (!input.equalsIgnoreCase(\"exit\")); // repeats loop until user types 'exit'\r\n\r\n        // exit message\r\n        log.info(\"exiting game...\");\r\n        System.out.println(\"Thanks for playing!\");\r\n        scanner.close();\r\n    }\r\n\r\n    private static void printCommands() {\r\n        // list of available commands\r\n        System.out.println(\"AVAILABLE COMMANDS:\");\r\n        System.out.println(\"--------------------\");\r\n        System.out.println(ConsoleColors.YELLOW+\"1. look <direction>\"+ConsoleColors.RESET+\": looks at the specified direction\");\r\n        System.out.println(ConsoleColors.YELLOW+\"2. inspect <item>\"+ConsoleColors.RESET+\": inspects the specified item\");\r\n        System.out.println(ConsoleColors.YELLOW+\"3. use <item>\"+ConsoleColors.RESET+\": attempts to use the specified item\");\r\n        System.out.println(ConsoleColors.YELLOW+\"4. open <item>\"+ConsoleColors.RESET+\": attempts to open the specified item\");\r\n        System.out.println(ConsoleColors.YELLOW+\"5. score\"+ConsoleColors.RESET+\": prints player score\");\r\n        System.out.println(ConsoleColors.YELLOW+\"6. hiscores\"+ConsoleColors.RESET+\": displays the high scores\");\r\n        System.out.println(ConsoleColors.YELLOW+\"7. help\"+ConsoleColors.RESET+\": prints this message\");\r\n        System.out.println(ConsoleColors.YELLOW+\"8. about\"+ConsoleColors.RESET+\": prints game info\");\r\n        System.out.println(ConsoleColors.YELLOW+\"9. exit\"+ConsoleColors.RESET+\": exits the game\");\r\n    }\r\n    private static void printTitle(){\r\n        String ver = \"v0.8.5\"; // this is just a rough estimate based on what we've done so far vs what remains. Will say v1.0 when we hand in\r\n        // text generated via https://patorjk.com/software/taag. This is the \"Invita\" font\r\n        final String title = ConsoleColors.BLUE+\"\\n\"+\r\n                \"\\n\" +\r\n                \"     _____)                   ______                        ______)         __    __)      \\n\" +\r\n                \"   /        /)               (, /    )               /)    (, /  /)        (, )  /    , /) \\n\" +\r\n                \"   )__   _ (/  ___ _  _        /---(   _     ____  _(/       /  (/   _        | /  _   //  \\n\" +\r\n                \" /      (__/ )(_)_(/_/_)_   ) / ____)_(/_(_/(_)/ ((_(_    ) /   / )_(/_       |/ _(/_((/_  \\n\" +\r\n                \"(_____)                    (_/ (        .-/              (_/                  |            \\n\" +\r\n                \"                                       (_/                                                 \\n\"+\r\n                \"                                                                                 \"+ver+ConsoleColors.RESET;\r\n\r\n        // text generated via https://patorjk.com/software/taag. This is the \"Slant\" font\r\n//        final String oldTitle = ConsoleColors.RED+\"\\n\" +\r\n//                \"    ___________ _________    ____  ______   ____  ____  ____  __  ___\\n\" +\r\n//                \"   / ____/ ___// ____/   |  / __ \\\\/ ____/  / __ \\\\/ __ \\\\/ __ \\\\/  |/  /\\n\" +\r\n//                \"  / __/  \\\\__ \\\\/ /   / /| | / /_/ / __/    / /_/ / / / / / / / /|_/ / \\n\" +\r\n//                \" / /___ ___/ / /___/ ___ |/ ____/ /___   / _, _/ /_/ / /_/ / /  / /  \\n\" +\r\n//                \"/_____//____/\\\\____/_/  |_/_/   /_____/  /_/ |_|\\\\____/\\\\____/_/  /_/   \\n\" +\r\n//                \"====================================================================\\n\"+ConsoleColors.RESET;\r\n        System.out.println(title);\r\n        System.out.println();\r\n    }\r\n\r\n    //This is our example of the comparator. The difference between a comparator and comparable is that\r\n    //a comparator is used to compare different aspects between two specific objects of a certain type. Whereas a\r\n    //a comparable defines how you can sort a large collection of objects.\r\n    Comparator<Player> nameComparator = new Comparator<>() {\r\n        public int compare(Player p1, Player p2) {\r\n            return p1.getName().compareTo(p2.getName());\r\n        }\r\n    };\r\n\r\n    private static void printScore(Player player) {\r\n        int playerScore = player.getScore();\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.YELLOW+\"Player Score\"+ConsoleColors.RESET+\": \" + playerScore);\r\n    }\r\n\r\n    private static void playIntro() throws InterruptedException {\r\n        System.out.println(ConsoleColors.GREEN+\"DISEMBODIED VOICE: \"+ConsoleColors.RESET+\"'BEGONE!'\");\r\n        Thread.sleep(2000);\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": The voice's command reverberates through the astral plane, shaking the very fabric of your being. The dim candle flares violently, its light expanding into a blinding, otherworldly\\n\" +\r\n                \"radiance. Shadows writhe and twist as if alive, stretching toward you like grasping tendrils. The air grows heavy, pressing against your soul with an almost tangible weight.\");\r\n        Thread.sleep(6000);\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": A low, resonant hum begins to build, vibrating through your essence. It grows louder and louder, until it feels as though the sound is coming from within you. The candle's light intensifies,\\n\" +\r\n                \"its glow shifting from warm yellow to an eerie, pulsating blue. As the shadows around you fracture and splinter, you catch brief glimpses of impossible geometries - angles that shouldn't exist, colors\\n\" +\r\n                \"that have no name.\");\r\n        Thread.sleep(7000);\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": The voice echoes again, but this time it is not alone - it is a chorus - a cacophony of whispers and blood-curdling screams, all in unison: \\\"\"+ConsoleColors.RED+\"BEGONE!, BEGONE!, BEGONE!\"+ConsoleColors.RESET+\"\\\" The sound is\\n\" +\r\n                \"deafening, overwhelming, as if the very fabric of the astral plane is rejecting you.\");\r\n        Thread.sleep(6000);\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": The light from the candle explodes outward in a blinding wave, engulfing everything. For a moment, you are weightless, suspended in a void of pure sensation. Colors and sounds blur together,\\n\" +\r\n                \"indistinguishable from one another. You feel as though you are being pulled apart and reassembled, your essence scattered across the cosmos and then drawn back together. And then... \");\r\n        Thread.sleep(6000);\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": ... Silence...\");\r\n        Thread.sleep(3000);\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": ... Darkness...\");\r\n        Thread.sleep(3000);\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": A single, faint pulse of light, like a heartbeat...\");\r\n        Thread.sleep(3000);\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": And then... \");\r\n        Thread.sleep(4000);\r\n        System.out.println();\r\n        System.out.println();\r\n        System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": You awaken, groggily, to the sound of rain tapping against a fogged window. The air is heavy, thick with the scent of damp wood and something faintly metallic,\\n\" +\r\n                \"like the tang of old blood. The room around you is dimly lit, its edges blurred by shadows that seem to shift when you aren't looking. A faint hum fills the air,\\n\" +\r\n                \"low and resonant, as though the walls themselves are alive. The rain outside falls in a steady rhythm, but the fog beyond the window moves unnaturally, swirling and\\n\" +\r\n                \"coiling like a living thing. The wallpaper peels at the edges, revealing patterns beneath that seem to shift when you look away. Your head throbs faintly, as though you've\\n\" +\r\n                \"forgotten something important. This place feels like a threshold - a space between worlds - and you can't tell if you're meant to escape or if something is waiting for you to\\n\" +\r\n                \"step further in...\");\r\n    }\r\n\r\n    private static void printHiScores(ScoreDB scoreDB) throws Exception {\r\n\r\n\r\n        System.out.println(\"\\n\" +\r\n                \"██╗  ██╗██╗ ██████╗ ██╗  ██╗    ███████╗ ██████╗ ██████╗ ██████╗ ███████╗███████╗\\n\" +\r\n                \"██║  ██║██║██╔════╝ ██║  ██║    ██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝\\n\" +\r\n                \"███████║██║██║  ███╗███████║    ███████╗██║     ██║   ██║██████╔╝█████╗  ███████╗\\n\" +\r\n                \"██╔══██║██║██║   ██║██╔══██║    ╚════██║██║     ██║   ██║██╔══██╗██╔══╝  ╚════██║\\n\" +\r\n                \"██║  ██║██║╚██████╔╝██║  ██║    ███████║╚██████╗╚██████╔╝██║  ██║███████╗███████║\\n\" +\r\n                \"╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═╝    ╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝\\n\" +\r\n                \"                                                                                 \\n\");\r\n        Connection conn = ScoreDB.Setup();\r\n        if (conn != null) {\r\n            List<Player> players = scoreDB.Test(conn);\r\n\r\n            Collections.sort(players);\r\n\r\n            System.out.println(\"This is the sorted players and scores using the Comparable and Comparator\");\r\n\r\n            for (Player player : players) {\r\n                System.out.println(player.getName());\r\n                System.out.println(player.getScore());\r\n            }\r\n        }\r\n    }\r\n    private static void printAboutInfo() {\r\n        String aboutHeader =\r\n                        ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET+\r\n                        \"            ABOUT THIS GAME\\n\" +\r\n                                ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        String aboutInfo = \"Game Title: Echoes Beyond The Veil\\n\" +\r\n                \"Version: 1.0\\n\" +\r\n                \"Release Date: March 12 2025\";\r\n        String descHeader =\r\n                ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET +\r\n                        \"            GAME DESCRIPTION\\n\" +\r\n                        ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        String descInfo =\r\n                \"Echoes Beyond The Veil is a text-based adventure game with strong cosmic horror / noir overtones. The player takes on the role of an unwitting explorer who finds themselves\\n\" +\r\n                        \"in a strange space between worlds with limited time to escape untold eldritch horrors and a fate worse than death.\\n\" +\r\n                        \"With every decision, you shape the story and dive deeper into this strange, liminal, place.\";\r\n        String devTeamHeader =\r\n                ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET +\r\n                        \"            DEVELOPMENT TEAM\\n\" +\r\n                        ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        String devInfo =\r\n                \"Developed collaboratively by:\\n\" +\r\n                        \"- Joey Diestler\\n\" +\r\n                        \"- Kyle Favorite\\n\" +\r\n                        \"- Sean Lane\\n\" +\r\n                        \"- Hunter Pasterski\";\r\n        String thanksInfoHeader =\r\n                ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET +\r\n                        \"            SPECIAL THANKS\\n\" +\r\n                        ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        String thanksInfo =\r\n                \"- Our families, for putting up with late nights and cranky mornings.\\n\" +\r\n                        \"- StackOverflow, for always sending us on a wild goose chase for an obscure forum post with the wrong answer.\\n\" +\r\n                        \"- Coffee, for doing what coffee do.\\n\" +\r\n                        \"- Josh, for helping us all nail down our understanding of interfaces.\";\r\n        String legalHeader =\r\n                ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET +\r\n                        \"            LEGAL INFORMATION\\n\" +\r\n                        ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        String legalInfo =\r\n                \"© 2025 Echoes Beyond The Veil. All rights reserved.\\n\" +\r\n                        \"This game is a work of fiction. Any resemblance to actual events or persons, living or dead, is purely coincidental.\\n\\n\" +\r\n                        \"Music © Cthulhu Mythos Music 2023\";\r\n        String thanksMessage =\r\n                ConsoleColors.BLUE+\"==========================================\\n\"+ConsoleColors.RESET +\r\n                        \"            THANK YOU FOR PLAYING!\\n\" +\r\n                        ConsoleColors.BLUE+\"==========================================\"+ConsoleColors.RESET;\r\n        System.out.println(aboutHeader);\r\n        System.out.println(aboutInfo);\r\n        System.out.println();\r\n        System.out.println(descHeader);\r\n        System.out.println(descInfo);\r\n        System.out.println();\r\n        System.out.println(devTeamHeader);\r\n        System.out.println(devInfo);\r\n        System.out.println();\r\n        System.out.println(thanksInfoHeader);\r\n        System.out.println(thanksInfo);\r\n        System.out.println();\r\n        System.out.println(legalHeader);\r\n        System.out.println(legalInfo);\r\n        System.out.println();\r\n        System.out.println(thanksMessage);\r\n    }\r\n    private static Integer setGameOverScore(Room room) {\r\n        return room.getRoomPar() * 3;\r\n    }\r\n    private static void gameOver(Player player) {\r\n        try {\r\n            Thread.sleep(3000);\r\n            System.out.println();\r\n            System.out.println();\r\n            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                    \": The shadows in the room deepen, their edges sharpening as they creep toward you. The air grows heavy, pressing down on your chest like a weight you can't shake. The faint hum that has haunted you\\n\" +\r\n                    \"since you arrived now rises to a deafening roar, and the walls seem to close in, their surfaces rippling like liquid darkness.\");\r\n            Thread.sleep(3000);\r\n            System.out.println();\r\n            System.out.println(ConsoleColors.RED+ \"ACTION\" +ConsoleColors.RESET+\r\n                    \": You try to move, but your body refuses to obey. The shadows coil around you, their touch cold - unyielding. The last thing you see is the faint flicker of a candle in the distance, its light\\n\" +\r\n                    \"extinguished as the void consumes all. The last thing you hear is a low, hungry laugh - a sound that echoes in your mind long after everything else fades to black.\");\r\n            Thread.sleep(3000);\r\n            System.out.println();\r\n            System.out.println(ConsoleColors.GREEN+\"DISEMBODIED VOICE: \"+ConsoleColors.RESET+\"\\\"\"+player.getUpperName()+\"... I told you to be gone. Now you will stay... Forever.\");\r\n            Thread.sleep(3000);\r\n            System.out.println();\r\n            System.out.println(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                    \": As the darkness envelops you completely, you feel a presence - vast, ancient, and utterly alien. It reaches for you, not with hands but with something indescribable - something that twists\\n\" +\r\n                    \"your very essence. You realize, too late, that death would have been a mercy. What comes next is not an end, but a beginning... An eternity as part of something far greater and far, far more\\n\" +\r\n                    \"terrible than you could ever comprehend...\");\r\n            System.out.println();\r\n            System.out.println();\r\n        } catch (InterruptedException ex) {\r\n            System.out.println(\"Game Over Method Error\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /// ---------------------------------------{ INLINE CLASSES AND ENUMS BEGIN HERE }--------------------------------------------------------\r\n    // enum representing four cardinal directions\r\n    public enum Direction {\r\n        north(\"to the north\"),\r\n        south(\"to the south\"),\r\n        east(\"to the east\"),\r\n        west(\"to the west\");\r\n\r\n        private final String description; //\r\n\r\n        Direction(String description) {\r\n            this.description = description;\r\n        }\r\n\r\n        public String getDescription() {\r\n            return description; // returns the direction's description\r\n        }\r\n    }\r\n\r\n    private static Room SetNewRoom(Logger log, String roomName) throws Exception {\r\n        // Create RoomSetup object\r\n        RoomSetup roomSetup = new RoomSetup();\r\n\r\n        // Declare room variable\r\n        Room room = null;\r\n\r\n        // Assign previously declared room variable to a new room depending on roomName input\r\n        if(roomName.equalsIgnoreCase(\"Tutorial Room\")) {\r\n            // Assigns room to return of roomSetup's makeRooms method\r\n            room = roomSetup.MakeRoom_TutorialRoom();\r\n        }\r\n        else if (roomName.equalsIgnoreCase(\"The Conservatory\")) {\r\n            room = roomSetup.MakeRoom_Conservatory();\r\n        }\r\n        else if (roomName.equalsIgnoreCase(\"The Lab\")) {\r\n            room = roomSetup.MakeRoom_Lab();\r\n        }\r\n        else if (roomName.equalsIgnoreCase(\"Undefined\")) {\r\n            room = roomSetup.MakeRoom_Undefined();\r\n        }\r\n        // Sets room name\r\n        if (room != null) {\r\n            room.setName(roomName);\r\n            roomSetup.AssignRandomItems(room); // waits until after room is named before randomizing props\r\n        }\r\n        else {\r\n            throw new Exception(\"Room does not exist!\"); // error handling in case room doesn't exist\r\n        }\r\n\r\n        // prints logs\r\n        log.debug(ConsoleColors.PURPLE+\"instantiating \" + room.getName()+ConsoleColors.RESET);\r\n        log.debug(ConsoleColors.PURPLE+\"adding items to \" + room.getName()+ConsoleColors.RESET);\r\n        System.out.println();\r\n\r\n        return room;\r\n    }\r\n\r\n\r\n    private static void ShowRoomName(Room currentRoom) {\r\n        System.out.println(currentRoom.getName());\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dev/java/game/Main.java b/src/dev/java/game/Main.java
--- a/src/dev/java/game/Main.java	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/src/dev/java/game/Main.java	(date 1741629003135)
@@ -27,7 +27,7 @@
             ArrayList<Room> rooms = new ArrayList<Room>();
             int gameOverScore = 0; // sets gameOverScore to 0 at the top of the loop instead of outside of it
             // Create tutorial room using SetNewRoom
-            Room room = SetNewRoom(log, "Tutorial Room");
+            Room room = SetNewRoom(log, "Tutorial Room",false);
             //You could loop this and have an infinite number of rooms
             //Check out the RoomSetup Class for how it works!
             rooms.add(room);
@@ -68,6 +68,14 @@
                         try {
                             final Direction direction = Direction.valueOf(parts[1].toLowerCase()); // gets direction
 
+                            /// Joey added this to assign a direction variable to the player cause I need it for my final room
+                            player.setFacing(direction);
+
+                            if(room.getName().equalsIgnoreCase("Final Room")) {
+                                room.SetExitDoor(room.getDoorAtDirection(direction).getFirst());
+                                System.out.println("Exit door is now on the " + direction + " wall.");
+                            }
+
                             if (!room.getItemsAtDirection(direction).isEmpty()) {
                                 // Set all items in this direction to observed
                                 for (Item item : room.getItemsAtDirection(direction)) {
@@ -146,7 +154,8 @@
                                     if (room.GetExitDoor().isObserved()) {
                                         item.use(); // uses the key
                                         room.GetExitDoor().unlockDoor(); // unlocks the door
-                                    } else {
+                                    }
+                                    else {
                                         System.out.println(ConsoleColors.GREEN + "PERCEPTION" + ConsoleColors.RESET + ": You have not seen anything to unlock");
                                     }
                                 }
@@ -204,13 +213,19 @@
                                         player.setScore(player.getScore() - room.getRoomPar());
                                         /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR
                                         if (room.getName().equalsIgnoreCase("Tutorial Room")) {
-                                            room = SetNewRoom(log, "The Conservatory");
+                                            room = SetNewRoom(log, "The Conservatory",false);
                                         } else if (room.getName().equalsIgnoreCase("The Conservatory")) {
-                                            room = SetNewRoom(log, "The Lab");
+                                            room = SetNewRoom(log, "The Lab",false);
 
                                             ///  TODO: Create the room that the Lab leads to
                                         } else if (room.getName().equalsIgnoreCase("The Lab")) {
-                                            room = SetNewRoom(log, "Undefined");
+                                            room = SetNewRoom(log, "Final Room",false);
+                                        }
+                                        else if (room.getName().equalsIgnoreCase("Final Room") && player.getFacing() == Direction.east) {
+                                            room = SetNewRoom(log, "THE END",true);
+                                        }
+                                        else if(room.getName().equalsIgnoreCase("Final Room") && player.getFacing() != Direction.east) {
+                                            room = SetNewRoom(log, "THE END",false);
                                         }
                                         System.out.println(ConsoleColors.RED+ "ACTION" +ConsoleColors.RESET+": You open the door and enter a new room. Welcome to " + room.getName());
                                         System.out.println();
@@ -223,7 +238,10 @@
                                             System.out.println(room.getIntroBlurb());
 
                                             ///  TODO: Change condition to fourth room name
-                                        } else if (room.getName().equalsIgnoreCase("Undefined")) {
+                                        } else if (room.getName().equalsIgnoreCase("Final Room")) {
+                                            FinalRoomDialog();
+                                        }
+                                        else if (room.getName().equalsIgnoreCase("THE END")) {
                                             System.out.println(room.getIntroBlurb());
                                         }
                                     }
@@ -243,11 +261,11 @@
                 }
                 /// SPEEDRUN OPTIONS --------ONLY FOR USE IN DEVELOPMENT-----------------------
                 else if (input.equalsIgnoreCase("speedrun to lab")){
-                    room = SetNewRoom(log, "The Lab"); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR
+                    room = SetNewRoom(log, "The Lab",false); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR
                     System.out.println(ConsoleColors.RED+ "ACTION" +ConsoleColors.RESET+": You open the door and enter a new room. Welcome to " + room.getName());
                 }
                 else if (input.equalsIgnoreCase("speedrun to conservatory")){
-                    room = SetNewRoom(log, "The Conservatory"); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR
+                    room = SetNewRoom(log, "The Conservatory",false); /// DEFINES THE ROOM ON THE OTHER SIDE OF THE DOOR
                     System.out.println(ConsoleColors.RED+ "ACTION" +ConsoleColors.RESET+": You open the door and enter a new room. Welcome to " + room.getName());
                     System.out.println();
                     System.out.println(room.getIntroBlurb());
@@ -538,7 +556,7 @@
         }
     }
 
-    private static Room SetNewRoom(Logger log, String roomName) throws Exception {
+    private static Room SetNewRoom(Logger log, String roomName, boolean rightDoor) throws Exception {
         // Create RoomSetup object
         RoomSetup roomSetup = new RoomSetup();
 
@@ -556,8 +574,11 @@
         else if (roomName.equalsIgnoreCase("The Lab")) {
             room = roomSetup.MakeRoom_Lab();
         }
-        else if (roomName.equalsIgnoreCase("Undefined")) {
-            room = roomSetup.MakeRoom_Undefined();
+        else if (roomName.equalsIgnoreCase("Final Room")) {
+            room = roomSetup.MakeRoom_FinalRoom();
+        }
+        else if (roomName.equalsIgnoreCase("THE END")) {
+            room = roomSetup.MakeRoom_TheEnd(rightDoor);
         }
         // Sets room name
         if (room != null) {
@@ -580,5 +601,69 @@
     private static void ShowRoomName(Room currentRoom) {
         System.out.println(currentRoom.getName());
     }
+
+    private static void FinalRoomDialog() throws InterruptedException {
+        System.out.println(ConsoleColors.GREEN+"DISEMBODIED VOICE: "+ConsoleColors.RESET+"DEEP EVIL LAUGHTER");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN+"DISEMBODIED VOICE: "+ConsoleColors.RESET+"Did you really think you would be able to just leave?! HA!");
+        Thread.sleep(2000);
+        System.out.println(ConsoleColors.GREEN+"DISEMBODIED VOICE: "+ConsoleColors.RESET+"I must confess myself impressed, you greatly exceeded my expectations.");
+        Thread.sleep(2000);
+        System.out.println(ConsoleColors.GREEN+"DISEMBODIED VOICE: "+ConsoleColors.RESET+"But now, will you withstand this final challenge?!");
+        Thread.sleep(2000);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'You have walked far, yet your past does not trail behind you—it walks beside you, step for step.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'The voices of the fallen still call your name.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'The friend you abandoned, the lover you failed, the child who never saw the dawn… they are not gone.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'They are here. In the cracks of your mind, in the marrow of your bones.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'You have changed? No. You have only buried the truth beneath time and dust.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'But now, it rises.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "'When you stand before the weight of your own sins, will you face them… or will you break beneath them?'");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN+"DISEMBODIED VOICE: "+ConsoleColors.RESET+"Only one of these four doors will lead to freedom, here is your clue, so listen closely!");
+        Thread.sleep(1000);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'Four paths stretch where silence calls,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'One to rise and three to fall.");
+        Thread.sleep(1500);
+        System.out.println();
+
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'North still echoes cries of pain,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'The friend you left, their plea in vain.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'South drips red where guilt once bled,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'A lover’s words, the last you said.");
+        Thread.sleep(1500);
+        System.out.println();
+
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'East holds ghosts with hollow tongues,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'A debt unpaid, but not yet done.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'West is weighed with bones you bear,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'someone's fate you did not spare.");
+        Thread.sleep(1500);
+        System.out.println();
+
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'One road mends, though scars remain,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'The rest will break you once again.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'Mark the cost of what you've done,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.CYAN + "'Choose with care, or be undone.");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "Understand this player, this is my pact with you, you either solve the riddle and choose the right door,");
+        Thread.sleep(1500);
+        System.out.println(ConsoleColors.GREEN + "DISEMBODIED VOICE: " + ConsoleColors.RESET + "or you'll be stuck entering doors like this for eternity! And no rush, I'm not going anywhere! HAHAHA!");
+    }
 }
 
Index: src/dev/java/game/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\npublic class Player implements Comparable<Player>{\r\n    private String name;\r\n    private int score;\r\n\r\n    public Player(String name, int score) {\r\n        this.name = name;\r\n        this.score = score;\r\n    }\r\n    public String getName() {return name;}\r\n    public String getUpperName() {\r\n        UpperNameOperator<String> playerUpperName = String::toUpperCase;\r\n        return playerUpperName.apply(name);\r\n    }\r\n\r\n    public int getScore() {return score;}\r\n\r\n    public void setName(String newName) {\r\n        this.name = newName;\r\n    }\r\n    public void setScore(int newScore) {\r\n        this.score = newScore;\r\n    }\r\n\r\n    //This is the our example of the comparable. The difference bewtween a comparator and comparable is that\r\n    //a comparator is used to compare different aspects bewtween two specfic objects of a certain type. Whereas a\r\n    //a comparable defines how you can sort a large collection of objects.\r\n    @Override\r\n    public int compareTo(Player otherPlayer) {\r\n        return Integer.compare(this.score, otherPlayer.score);\r\n    }\r\n\r\n    //The\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dev/java/game/Player.java b/src/dev/java/game/Player.java
--- a/src/dev/java/game/Player.java	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/src/dev/java/game/Player.java	(date 1741621724478)
@@ -3,6 +3,7 @@
 public class Player implements Comparable<Player>{
     private String name;
     private int score;
+    private Main.Direction facing;
 
     public Player(String name, int score) {
         this.name = name;
@@ -23,6 +24,14 @@
         this.score = newScore;
     }
 
+    public Main.Direction getFacing() {
+        return facing;
+    }
+
+    public void setFacing(Main.Direction newFacing) {
+        this.facing = newFacing;
+    }
+
     //This is the our example of the comparable. The difference bewtween a comparator and comparable is that
     //a comparator is used to compare different aspects bewtween two specfic objects of a certain type. Whereas a
     //a comparable defines how you can sort a large collection of objects.
Index: src/dev/java/game/RoomSetup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class RoomSetup {\r\n\r\n    /// Kyle commented this out on 3/1 update because it wasn't being used -- if it had a purpose that I didn't realize please correct me!\r\n//    public Room setGameRoom(Item item1, Item item2, Item item3, Item item4) {\r\n//\r\n//        Room newRoom = new Room();\r\n//\r\n//        newRoom.setItem(Main.Direction.east, item1);\r\n//        newRoom.setItem(Main.Direction.west, item2);\r\n//        newRoom.setItem(Main.Direction.north, item3);\r\n//        newRoom.setItem(Main.Direction.south, item4);\r\n//\r\n//        return newRoom;\r\n//    }\r\n\r\n    /// -------------------------------------------- { TUTORIAL ROOM } ----------------------------\r\n    public Room MakeRoom_TutorialRoom() {\r\n        Door exitDoor = null;\r\n\r\n        Room tutorialRoom = new Room();\r\n\r\n        exitDoor = new Door(tutorialRoom,1, \"a wooden \"+ConsoleColors.CYAN+\"door\"+ConsoleColors.RESET+\" with a rusty handle\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": There is a deadbolt that looks like it would accept an old key.\", \"door\");\r\n\r\n        tutorialRoom.SetExitDoor(exitDoor);\r\n        tutorialRoom.setRoomPar(5); // ROOM PAR\r\n\r\n        Desk itemDesk = new Desk(\"desk\",\r\n                \"a \"+ConsoleColors.CYAN+\"desk\"+ConsoleColors.RESET+\" with a \"+ConsoleColors.CYAN+\"lamp\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You notice the shape of a hand in the dust on the surface of the desk. Someone has been here.\");\r\n\r\n        Painting itemPainting = new Painting(\"painting\", \"a \"+ConsoleColors.CYAN+\"painting\"+ConsoleColors.RESET+\" of an old house surrounded by neatly-trimmed hedges, askew and dust-covered from years of neglect\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The painting is a haunting depiction of an old house, its weathered facade looming against a backdrop of stormy skies. The house is surrounded by neatly-trimmed hedges, their precise lines contrasting\\n\" +\r\n                        \"sharply with the chaos of the clouds above. The brushstrokes are meticulous, capturing every detail of the house's cracked windows and sagging porch, but there's something unnerving about the scene - \\n\" +\r\n                        \"something that makes your skin crawl.\\n\\n\" +\r\n                        \"The painting hangs askew, its frame thick with dust and cobwebs, as though it hasn't been touched in decades. As you lean closer, you notice faint details you hadn't seen before: shadows in the windows\\n\" +\r\n                        \"and a figure standing in the doorway, barely visible but unmistakably there. The figure's face is obscured, but you can feel its heavy gaze on you.\",\r\n                tutorialRoom);\r\n\r\n        Lamp itemLamp = new Lamp(\"lamp\", \"judging by the flickering of the bulb its on its last leg\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The lamp's once polished brass base shows signs of tarnish and wear. The bulb flickers intermittently, casting unsettling shadows that dance across the room. The switch, slightly loose and worn from years\\n\" +\r\n                        \"of use, hints at the lamp's frailty. It's as if the lamp is holding on by a thread, inviting you to test its resilience one last time.\");\r\n\r\n\r\n        tutorialRoom.setItem(Main.Direction.north, itemPainting);\r\n        tutorialRoom.setItem(Main.Direction.east, itemDesk);\r\n        tutorialRoom.setItem(Main.Direction.east, itemLamp);\r\n        tutorialRoom.setItem(Main.Direction.south, exitDoor);\r\n\r\n        return tutorialRoom;\r\n    }\r\n\r\n    /// -------------------------------------------- { THE CONSERVATORY } ----------------------------\r\n    public Room MakeRoom_Conservatory(){\r\n        /// PLAYER ENTERS FROM THE NORTH!\r\n        Room conservatoryRoom = new Room();\r\n        Door exitDoor = null;\r\n        // creates exit door\r\n        exitDoor = new Door(conservatoryRoom,2, \"a smooth steel \"+ConsoleColors.CYAN+\"door\"+ConsoleColors.RESET+\" with no handle\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You search for a keyhole but find none. It's a smooth, thick, steel plate.\", \"door\");\r\n        // defines SetExitDoor()\r\n        conservatoryRoom.SetExitDoor(exitDoor);\r\n        conservatoryRoom.setRoomPar(15);\r\n        // creates levers and uses observer pattern to call checkLevers() automatically whenever a lever's position changes\r\n        ///  LEVER A\r\n        Lever leverA = new Lever(\"lever1\", \"a lever (\"+ConsoleColors.CYAN + \"Lever1\" + ConsoleColors.RESET +\") with an onyx grip\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The left-most lever.\");\r\n        leverA.setPositionalIndicator(\"The left-most lever. \"); // sets left position relative to other levers\r\n        leverA.setInspection(leverA.getPositionalIndicator() + \" It's currently in the \" + leverA.getPosition() + \" position.\");\r\n        ///  LEVER B\r\n        Lever leverB = new Lever(\"lever2\", \"a lever (\"+ConsoleColors.CYAN + \"Lever2\" + ConsoleColors.RESET +\") with a jade grip\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The middle lever.\");\r\n        leverB.setPositionalIndicator(\"The middle lever. \"); // sets center position relative to other levers\r\n        leverB.setInspection(leverB.getPositionalIndicator() + \" It's currently in the \" + leverB.getPosition() + \" position.\");\r\n        ///  LEVER C\r\n        Lever leverC = new Lever(\"lever3\", \"a lever (\"+ConsoleColors.CYAN + \"Lever3\" + ConsoleColors.RESET +\") with an emerald grip\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The right-most lever.\");\r\n        leverC.setPositionalIndicator(\"The right-most lever. \"); // sets right position relative to other levers\r\n        leverC.setInspection(leverC.getPositionalIndicator() + \" It's currently in the \" + leverC.getPosition() + \" position.\");\r\n\r\n        // registers room as an observer for each lever\r\n        leverA.addObserver(conservatoryRoom);\r\n        leverB.addObserver(conservatoryRoom);\r\n        leverC.addObserver(conservatoryRoom);\r\n\r\n        // creates other room props\r\n        LargePortrait portraitPainting = new LargePortrait(\"portrait\", \"a large, dusty, \"+ConsoleColors.CYAN+\"portrait\"+ConsoleColors.RESET+\" looming imposingly on the wall where the door you just entered through should be\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": A grand painting stands before you. Its subject appears to be a shadowy figure cloaked in darkness, their form indistinct save\\n\" +\r\n                        \"for a single glowing eye that seems to pierce your soul. Around them, three stones are suspended in the air, each radiating an otherworldly energy.\\n\" +\r\n                        \"The onyx stone dominates the upper portion of the painting, its dark surface shimmering with an eerie, almost predatory light.\\n\" +\r\n                        \"Below it, the jade and emerald stones rest side by side, their glow subdued as if overshadowed by the onyx. The arrangement feels deliberate, as if\\n\" +\r\n                        \"the stones are locked in a silent, eternal struggle.\\n\\n\" +\r\n                        \"A faint inscription at the bottom of the frame reads: \\\"The void ascends; the others kneel.\\\"\",\r\n                conservatoryRoom);\r\n\r\n        Phonograph itemPhonograph = new Phonograph(\"phonograph\",\r\n                \"an tarnished antique \"+ConsoleColors.CYAN+\"phonograph\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The phonograph is a relic of another era, its brass horn tarnished to a dull green and its wooden base cracked with age. The surface is etched with strange, angular symbols that make your\\n\" +\r\n                        \"stomach churn when looking directly at them. A record rests on the turntable, its label faded and illegible, except for a single word scrawled in jagged handwriting: \\\"Ascension.\\\"\");\r\n        Diary itemDiary = new Diary(\"diary\", \"a small, leather-bound \"+ConsoleColors.CYAN+\"diary\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The diary is a small, leather-bound book, its cover cracked and brittle with age. The pages are yellowed and fragile, filled with neat, precise handwriting that crows increasingly erratic as you read. The\\n\" +\r\n                        \"entries tell the story of a scientist who once occupied this room.\\n\\n\" +\r\n                        \"\\\"\"+ConsoleColors.BLUE+\"Day 1\"+ConsoleColors.RESET+\": I've finally deciphered the symbols on the levers. There's a pattern here, a logic to this madness. If I can just align them correctly, I might unlock the door. I can feel it. I'm so close.\\\"\\n\\n\" +\r\n                        \"\\\"\"+ConsoleColors.BLUE+\"Day 7\"+ConsoleColors.RESET+\": The levers are only part of it. The telescope, the orrery, the phonograph... They're all connected. I've spent hours staring at the stars through that damned telescope, and I swear they're\\n\" +\r\n                        \"watching me back. And that god damned hum... It grows louder every day. I can't sleep...\\\"\\n\\n\" +\r\n                        \"\\\"\"+ConsoleColors.BLUE+\"Day 14\"+ConsoleColors.RESET+\": The shadows are moving. I see them out of the corner of my eye, laughing at me. The lantern's light doesn't keep them at bay anymore. I think they're waiting for me to make a mistake.\\\"\\n\\n\" +\r\n                        \"\\\"\"+ConsoleColors.BLUE+\"Day 21\"+ConsoleColors.RESET+\": I was wrong. There is no escape. The levers, the telescope, the damned orrery, that cursed phonograph; they aren't puzzles. They're traps. The shadows are closer now, whispering things I\\n\" +\r\n                        \"can't understand. I can't do this anymore.\\\"\\n\\n\" +\r\n                        \"The final entry is scrawled in a shaky hand, the ink smeared as though written in haste: \\\"I'm so sorry. I can't hold on. The shadows are here, inside me. Forgive me... \\\"\");\r\n        Corpse itemCorpse = new Corpse(\"corpse\", \"a mostly-decomposed \"+ConsoleColors.CYAN+\"corpse\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The corpse is slumped against the wall, its skeletal frame draped in the tattered remains of a lab coat. The bones are brittle and discolored, the flesh long-since decayed, but the posture is\\n\" +\r\n                        \"unmistakable - head bowed, hands clutching a rusted scalpel embedded in its chest. The air around the body is cold, and the shadows seem to gather here, thicker and darker than elsewhere in the room.\\n\" +\r\n                        \"A faint, almost imperceptible hum lingers in the air, as if the scientist's despair has left an indelible mark on this place.\");\r\n\r\n\r\n        // adds items to their respective walls\r\n        conservatoryRoom.setItem(Main.Direction.north, portraitPainting);\r\n        conservatoryRoom.setItem(Main.Direction.south, itemPhonograph);\r\n        conservatoryRoom.setItem(Main.Direction.south, itemCorpse);\r\n        conservatoryRoom.setItem(Main.Direction.south, itemDiary);\r\n        conservatoryRoom.setItem(Main.Direction.west, leverA);\r\n        conservatoryRoom.setItem(Main.Direction.west, leverB);\r\n        conservatoryRoom.setItem(Main.Direction.west, leverC);\r\n        conservatoryRoom.setItem(Main.Direction.east, exitDoor);\r\n\r\n        conservatoryRoom.setIntroBlurb(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": The air here is cold and still, carrying the faint scent of ozone and old parchment. The conservatory feels like a cathedral to the unknown, its domed\\n\" +\r\n                \"ceiling lost in shadow, save for faint pinpricks of light that might be stars. The walls are lined with shelves, their contents obscured by layers of dust and time,\\n\" +\r\n                \"and the floor is a mosaic of cracked tiles, their patterns swirling in ways that make your head ache if you stare too long. A low hum fills the air, unsettling in\\n\" +\r\n                \"the way it seems to reverberate through your body. This room feels alive with some ancient, dormant power. You can't shake the feeling that this place was not built\\n\" +\r\n                \"to study the stars, but to commune with something far, far older.\");\r\n\r\n        return conservatoryRoom;\r\n    }\r\n\r\n    /// -------------------------------------------- { THE LAB } ----------------------------\r\n    public Room MakeRoom_Lab() {\r\n        Door exitDoor = null;\r\n\r\n        Room labRoom = new Room();\r\n\r\n        ArrayList<Item> items = new ArrayList<Item>();\r\n\r\n        labRoom.setRoomPar(10);\r\n\r\n        // machine attached to a wall. Player doesn't know how to use it (diegetically) until they inspect() on the scientist's research notebook\r\n        // if they try to use transmorg before they read the notebook, they'll fall in and GAME OVER\r\n        // when player uses transmorg, game prompts them to pick an item from the list of observed items we're already tracking\r\n        Transmorgrifier transmorgrifier = new Transmorgrifier(\"transmorgrifier\",\"An odd \" +ConsoleColors.CYAN+\"machine\"+ConsoleColors.RESET +\" with many knobs, levers, and buttons\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION: \" +ConsoleColors.RESET+\": You notice how odd looking this machine is\",labRoom);\r\n\r\n\r\n        Sandwich sandwich = new Sandwich(\"sandwich\",\"a moldy ham \" +ConsoleColors.CYAN+\"sandwich\"+ConsoleColors.RESET +\" on rye bread\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The sandwich doesn't smell like something you'd eat.\", transmorgrifier);\r\n\r\n        exitDoor = new Door(labRoom,1, \"a heavy metal \" +ConsoleColors.CYAN+\"door\"+ConsoleColors.RESET +\" etched withs strange runes\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": There is a mechanism that looks like it would accept a key.\", \"door\");\r\n\r\n        labRoom.SetExitDoor(exitDoor);\r\n\r\n        // scientist's research notebook\r\n        Notebook notebook  = new Notebook(\"notebook\", \"a scientist's research \" +ConsoleColors.CYAN+\"notebook\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The notebook documents experiments conducted by\" +\r\n                \" a scientist experimenting with alchemy. You perceive that you could use it to learn his ways.\", transmorgrifier);\r\n\r\n        Flask flask = new Flask(\"flask\",\"a clear crystal \" +ConsoleColors.CYAN+\"flask\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": You notice the flask has a tangy smell to it\", transmorgrifier, labRoom);\r\n\r\n        // deck of cards\r\n        DeckOfCards deckOfCards = new DeckOfCards(\"cards\",\"a deck of \" +ConsoleColors.CYAN+\"cards\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": Stained with signs of use, the deck may have been used by lab workers to pass the time.\", transmorgrifier, labRoom);\r\n\r\n        // vat of strange liquid\r\n        VatOfLiquid vatOfLiquid = new VatOfLiquid(\"vat\", \"a \" +ConsoleColors.CYAN+\"vat\"+ConsoleColors.RESET +\" of green of liquid\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The liquid bubbles ominously and smells awful.\");\r\n\r\n        Thermometer thermometer = new Thermometer(\"thermometer\", \"a dusty \" +ConsoleColors.CYAN+\"thermometer\"+ConsoleColors.RESET +\" sitting in a cup\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": The thermometer's red mercury reads at a level much higher than the \\n\"+\r\n                \"temperature of the room. It must be broken.\", transmorgrifier);\r\n\r\n        items.add(sandwich);\r\n        items.add(flask);\r\n        items.add(deckOfCards);\r\n        items.add(thermometer);\r\n        transmorgrifier.setItemsToTransmorgrify(items);\r\n\r\n        // add items using room.setItem here\r\n        labRoom.setItem(Main.Direction.west, exitDoor);\r\n        labRoom.setItem(Main.Direction.north, notebook );\r\n        labRoom.setItem(Main.Direction.north, sandwich);\r\n        labRoom.setItem(Main.Direction.east, deckOfCards);\r\n        labRoom.setItem(Main.Direction.south, vatOfLiquid);\r\n        labRoom.setItem(Main.Direction.east, thermometer);\r\n        labRoom.setItem(Main.Direction.north, flask);\r\n        labRoom.setItem(Main.Direction.south, transmorgrifier);\r\n\r\n        labRoom.setIntroBlurb(ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                \": Dust hangs in the air as you enter the lab. Scientific instruments that have clearly gone unused for a long time are haphazardly arranged on tables. \\n\"+\r\n                \"You hear the sound of bubbling liquid and the whirring of machines. You are careful as you step slowly forward, making sure to dodge the broken glass \\n\"+\r\n                \"and strange chemicals littered around the floor. The walls are lined with mold that stretches up to the ceiling. The room feels wicked and dangerous, as if a \\n\"+\r\n                \"single wrong step could cause you to join the decay.\");\r\n\r\n        AssignRandomItems(labRoom);\r\n\r\n        return labRoom;\r\n    }\r\n\r\n    public Room MakeRoom_Undefined() {\r\n        Room room = new Room();\r\n\r\n        return room;\r\n    }\r\n\r\n    // Method for randomly assigning prebuilt items to walls\r\n    public void AssignRandomItems(Room room) {\r\n        ArrayList<Item> items = new ArrayList<Item>(); // items will be added to this array for randomizing placement\r\n        ArrayList<Main.Direction> dirs = new ArrayList<Main.Direction>(); // placeholder array for directions\r\n        // adds directional refs to placeholder\r\n        dirs.add(Main.Direction.north);\r\n        dirs.add(Main.Direction.south);\r\n        dirs.add(Main.Direction.east);\r\n        dirs.add(Main.Direction.west);\r\n\r\n        /// builds out items\r\n        // Tutorial Room stuff\r\n        Window itemWindow = new Window(\"window\",\r\n                \"a \"+ConsoleColors.CYAN+\"window\"+ConsoleColors.RESET+\" overlooking a garden\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The window is streaked with rain, the glass fogged and cold to the touch. Beyond it, the fog churns - tendrils curling and twisting, defying the wind like something alive.\\n\" +\r\n                        \"Occasionally, you think you see shapes moving within - tall, slender shapes with too many limbs, or perhaps it's just the play of light and shadow.\");\r\n\r\n        PottedPlant itemPlant = new PottedPlant(\"plant\",\r\n                \"a \"+ConsoleColors.CYAN+\"plant\"+ConsoleColors.RESET+\" in a pot\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": A vibrant plant sits in a polished ceramic pot. Its lush green leaves stretch upward, and the soil looks rich and well-watered.\");\r\n\r\n        Bookshelf itemBookshelf = new Bookshelf(\"bookshelf\",\r\n                \"a \"+ConsoleColors.CYAN+\"bookshelf\"+ConsoleColors.RESET+\" filled with books about the occult\",\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\": A pungent aura of aged paper and leather pervades the air around the bookshelf. Among the many tomes, several of \\n\" +\r\n                        \"Aleister Crowley's occult works stand out; their dark, worn spines hinting at secrets and mysteries bound within.\");\r\n        // Conservatory stuff\r\n        Lantern itemLantern = new Lantern(\"lantern\", \"a rusty \"+ConsoleColors.CYAN+\"lantern\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The lantern is an antique, its brass fittings tarnished and its glass panes cracked with age. The fuel inside glows faintly, even when unlit, with a color that defies description - something\\n\" +\r\n                        \"between blue and violet, but not quite either. The handle is cold to the touch, and when you hold it, you feel a faint vibration.\");\r\n        Orrery itemOrrery = new Orrery(\"orrery\", \"an old mechanical \"+ConsoleColors.CYAN+\"orrery\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The orrery is an intricate model of a solar system, its brass framework tarnished with age but still gleaming faintly in the dim light. The planets are crafted with meticulous detail, their surfaces\\n\" +\r\n                        \"etched with faint, angular symbols like the others you've seen since you arrived. The solar system has fourteen planets, their orbits intersecting like nothing you've ever seen. The model seems to be \\n\" +\r\n                        \"depicting a reality far-removed from your own. The crank on the side feels cold to the touch.\");\r\n        Telescope itemTelescope = new Telescope(\"telescope\", \"a large, ornately-carved \"+ConsoleColors.CYAN+\"telescope\"+ConsoleColors.RESET,\r\n                ConsoleColors.GREEN+ \"PERCEPTION\" +ConsoleColors.RESET+\r\n                        \": The telescope is a masterpiece of craftsmanship, its brass body adorned with intricate carvings of celestial bodies and angular, runic symbols. The eyepiece is cold to the touch and, when you peer through\\n\" +\r\n                        \"it, the stars outside seem closer, brighter. The carvings along the barrel depict scenes of astronomers gazing into the void, their faces twisted in expressions of awe and terror.\");\r\n\r\n\r\n        /// TODO: NEED TO PREBAKE CONSTRUCTORS FOR SOME ADDITIONAL TUTORIAL ROOM ITEMS AS WELL AS ITEMS FOR OTHER ROOMS. MAYBE AIM FOR >= 5 NON-QUEST PROPS IN EACH ROOM??\r\n        /// WE CAN BUILD THEM OUT ABOVE AND THEN ADD THEM TO THEIR RESPECTIVE ROOMS BELOW\r\n\r\n        //  items added is dependent upon the room being passed into params\r\n        if (room.getName().equalsIgnoreCase(\"Tutorial Room\")) {\r\n            items.add(itemPlant);\r\n            items.add(itemWindow);\r\n            items.add(itemBookshelf);\r\n            randomizePropSpawnDirection(room, items, dirs);\r\n        } else if (room.getName().equalsIgnoreCase(\"The Conservatory\")) {\r\n            // adds relevant room items\r\n            ///  for some reason, exitDoor cannot be found if less than three items are added to items. Worth looking into if we have time but not gamebreaking as long as we have\r\n           ///  enough room items randomly spawning in\r\n            items.add(itemOrrery);\r\n            items.add(itemLantern);\r\n            items.add(itemTelescope);\r\n            randomizePropSpawnDirection(room, items, dirs);\r\n        } else if (room.getName().equalsIgnoreCase(\"The Lab\")) {\r\n            // adds relevant room items\r\n        }\r\n\r\n    }\r\n    private void randomizePropSpawnDirection(Room room, ArrayList<Item> items, ArrayList<Main.Direction> dirs) {\r\n        // picks a random dir and assigns a random item from items to it\r\n        int itemIndex;\r\n        int dirIndex;\r\n\r\n        for (int i = 0; i < 3; i++) {\r\n\r\n            Random rand = new Random();\r\n\r\n            if (!dirs.isEmpty()) {\r\n                itemIndex = rand.nextInt(items.size());\r\n                dirIndex = rand.nextInt(dirs.size());\r\n            } else {\r\n                itemIndex = 0;\r\n                dirIndex = 0;\r\n            }\r\n            room.setItem(dirs.get(dirIndex), items.get(itemIndex));\r\n\r\n            dirs.remove(dirIndex);\r\n            items.remove(itemIndex);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dev/java/game/RoomSetup.java b/src/dev/java/game/RoomSetup.java
--- a/src/dev/java/game/RoomSetup.java	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/src/dev/java/game/RoomSetup.java	(date 1741629003150)
@@ -6,18 +6,6 @@
 
 public class RoomSetup {
 
-    /// Kyle commented this out on 3/1 update because it wasn't being used -- if it had a purpose that I didn't realize please correct me!
-//    public Room setGameRoom(Item item1, Item item2, Item item3, Item item4) {
-//
-//        Room newRoom = new Room();
-//
-//        newRoom.setItem(Main.Direction.east, item1);
-//        newRoom.setItem(Main.Direction.west, item2);
-//        newRoom.setItem(Main.Direction.north, item3);
-//        newRoom.setItem(Main.Direction.south, item4);
-//
-//        return newRoom;
-//    }
 
     /// -------------------------------------------- { TUTORIAL ROOM } ----------------------------
     public Room MakeRoom_TutorialRoom() {
@@ -215,10 +203,62 @@
         return labRoom;
     }
 
-    public Room MakeRoom_Undefined() {
-        Room room = new Room();
+    public Room MakeRoom_FinalRoom() {
+        Door exitDoor = null;
+        Door westDoor = null;
+        Door northDoor = null;
+        Door southDoor = null;
+
+        Room finalRoom = new Room();
 
-        return room;
+        ArrayList<Item> items = new ArrayList<Item>();
+
+        finalRoom.setRoomPar(10);
+
+        exitDoor = new Door(finalRoom,1, "The mirror-like surface of the " +ConsoleColors.CYAN+"door"+ConsoleColors.RESET +" shows you a scene you faintly remember from long ago. You see a scene where you are refusing help from your friend who is worried for you. They leave with a sad look as you throw a bottle at the wall in anger.",
+                ConsoleColors.GREEN+ "PERCEPTION" +ConsoleColors.RESET+": There is a mechanism that looks like it would accept a key.", "door");
+
+        finalRoom.SetExitDoor(exitDoor);
+
+        westDoor = new Door(finalRoom, 2, "The mirror-like surface of the " +ConsoleColors.CYAN+"door"+ConsoleColors.RESET +" shows you a scene you faintly remember from long ago. You see your childhood friend laying in a hospital bed, and the doctors scrambling because their heart has stopped.",
+                "You do not want to inspect this door any further","eastDoor");
+
+        northDoor = new Door(finalRoom, 2, "The mirror-like surface of the " +ConsoleColors.CYAN+"door"+ConsoleColors.RESET +" shows you a scene you faintly remember from long ago. You see the person you loved, storming out angry and sad after a bad fight, and you crumpling to the ground in despair.",
+                "You do not want to inspect this door any further","northDoor");
+
+        southDoor = new Door(finalRoom, 2, "The mirror-like surface of the " +ConsoleColors.CYAN+"door"+ConsoleColors.RESET +" shows you a scene you faintly remember from long ago. You see the lady at your doorstep, with her tear-streaked face. You remember she asked you for a ride to the hospital for her son, but you refused. Her son ended up dying in the ambulance because it was too late.",
+                "You do not want to inspect this door any further","door");
+
+        Key key = new Key("key","A mirror-like key","The key seems to swirl in and out of your hand when your holding it.", finalRoom);
+        key.setObserved(true);
+
+        finalRoom.setItem(Main.Direction.east, key);
+        finalRoom.setItem(Main.Direction.west,westDoor);
+        finalRoom.setItem(Main.Direction.north,northDoor);
+        finalRoom.setItem(Main.Direction.south,southDoor);
+        finalRoom.setItem(Main.Direction.east,exitDoor);
+
+        return finalRoom;
+    }
+
+
+    public Room MakeRoom_TheEnd(boolean rightDoor) {
+
+        Room theEndRoom = new Room();
+
+        if(rightDoor) {
+            theEndRoom.setIntroBlurb(ConsoleColors.GREEN+ "PERCEPTION" +ConsoleColors.RESET+
+                    "You step through the door into a blinding light and realize you are lying in a bed. After a minute you can see and" +
+                    " realize that your in a hospital and your body is in extreme pain.");
+        }
+        else {
+            theEndRoom.setIntroBlurb(ConsoleColors.GREEN+ "PERCEPTION" +ConsoleColors.RESET+
+                    "You hear evil laughter and immediately are filled with the most intense fear you've ever felt. You feel this disembodied presence press towards you with evil glee and realize you are doomed!");
+        }
+
+
+
+        return theEndRoom;
     }
 
     // Method for randomly assigning prebuilt items to walls
Index: src/dev/java/game/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\nimport java.util.*;\r\n\r\npublic class Room implements LeverObserver {\r\n    // this is the logical representation of the \"walls\" of each room\r\n    private EnumMap<Main.Direction, List<Item>> walls; // map of directions to items. syntax: <key, value>\r\n\r\n    // Keeps track of items in separate map not associated with direction\r\n    // This way player can inspect item without specifying direction\r\n    private Map<String, Item> items = new HashMap<>();\r\n\r\n    private String name = \"Undefined Room Name\";\r\n\r\n    private Door exitDoor;\r\n    private String introBlurb = \"UNDEFINED INTRO BLURB\";\r\n    private int roomPar = 0;\r\n\r\n    public Room() {\r\n        walls = new EnumMap<>(Main.Direction.class); // initializes map\r\n\r\n        for (Main.Direction direction : Main.Direction.values()) {\r\n            walls.put(direction, new ArrayList<>());\r\n        }\r\n    }\r\n\r\n    public void setItem(Main.Direction direction, Item item) {\r\n\r\n        // Adds item to wall specified by direction parameter\r\n        List<Item> itemList = walls.get(direction);\r\n        itemList.add(item);\r\n        items.put(item.getName().toLowerCase(), item); // adds item to item list - updated to ensure name is always lowercase\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public void setRoomPar(Integer roomPar) {\r\n        this.roomPar = roomPar;\r\n    }\r\n\r\n    public Integer getRoomPar() {\r\n        return roomPar;\r\n    }\r\n\r\n    public Door GetExitDoor() {\r\n        return exitDoor;\r\n    }\r\n\r\n    public void SetExitDoor(Door exitDoor) {\r\n        this.exitDoor = exitDoor;\r\n    }\r\n    public String getIntroBlurb() {\r\n        return introBlurb;\r\n    }\r\n    public void setIntroBlurb(String introBlurb) {\r\n        this.introBlurb = introBlurb;\r\n    }\r\n    public List<Item> getItemsAtDirection(Main.Direction direction) {\r\n        return walls.get(direction); // gets items at the specified direction\r\n    }\r\n\r\n    public String describeItemsToPlayer(List<Item> items) {\r\n        StringBuilder desc = new StringBuilder();\r\n\r\n        ///  PUNCTUATION FORMATTER\r\n        for (int i = 0; i < items.size(); i++) {\r\n            // if i is the second to last item in the list\r\n            if (i == items.size() - 2) {\r\n                // appends second to last item with an Oxford comma\r\n                desc.append(items.get(i).getDescription()).append(\", and \");\r\n            } else if (i == items.size() - 1) {\r\n                // appends last item\r\n                desc.append(items.get(i).getDescription()).append(\".\");\r\n            } else {\r\n                // appends other items with a comma\r\n                desc.append(items.get(i).getDescription()).append(\", \");\r\n            }\r\n        }\r\n        return desc.toString();\r\n    }\r\n\r\n    ///  method to check relative lever up/down status\r\n    public boolean checkLevers(Lever leverA, Lever leverB, Lever leverC) {\r\n        // defines correct config\r\n        boolean correctConfigA = leverA.getPosition().equals(\"up\");\r\n        boolean correctConfigB = leverB.getPosition().equals(\"down\");\r\n        boolean correctConfigC = leverC.getPosition().equals(\"down\");\r\n\r\n        return correctConfigA && correctConfigB && correctConfigC;\r\n    }\r\n\r\n    public Map<String, Item> getItems() {\r\n        return items;\r\n    }\r\n\r\n    public void addItem(Item item) {\r\n        items.put(item.getName().toLowerCase(), item);\r\n    }\r\n\r\n    @Override\r\n    public void onLeverStateChange(Lever lever) {\r\n        // calls existing checkLevers method\r\n        Lever leverA = (Lever) items.get(\"lever1\");\r\n        Lever leverB = (Lever) items.get(\"lever2\");\r\n        Lever leverC = (Lever) items.get(\"lever3\");\r\n\r\n        if (checkLevers(leverA, leverB, leverC)) {\r\n            if (lever.getPosition().equalsIgnoreCase(\"up\")) {\r\n                System.out.println(ConsoleColors.RED+\"ACTION\"+ConsoleColors.RESET+\": You push the lever back up. It clicks into place with a sharp, metallic sound.\");\r\n            } else {\r\n                System.out.println(ConsoleColors.RED+\"ACTION\"+ConsoleColors.RESET+\": You pull down on the lever. It settles into place with a heavy clunk.\");\r\n                try {\r\n                    Thread.sleep(1300);\r\n                } catch (InterruptedException e) {\r\n                    System.out.println(\"LOOK AT ROOM.onLeverStateChange() PLEASE\");\r\n                }\r\n                System.out.println();\r\n                System.out.println(ConsoleColors.GREEN + \"PERCEPTION\" + ConsoleColors.RESET +\r\n                        \": ...\");\r\n                try {\r\n                    Thread.sleep(1300);\r\n                } catch (InterruptedException e) {\r\n                    System.out.println(\"LOOK AT ROOM.onLeverStateChange() PLEASE\");\r\n                }\r\n                System.out.println();\r\n                System.out.println(ConsoleColors.GREEN + \"PERCEPTION\" + ConsoleColors.RESET +\r\n                        \": The walls seem to ripple, their surfaces alive with faint, pulsating light. A heavy CLUNK echoes from the \"+ConsoleColors.CYAN+\"door\"+ConsoleColors.RESET+\", followed by the sound of grinding gears and the hiss of releasing pressure. The door creaks \\n\" +\r\n                        \"open, revealing a dimly-lit corridor beyond. The air from the corridor carries a faint, acrid smell - chemicals, ozone, and something else, metallic and sharp. The room's ambient hum fades, leaving only the sound of your heartbeat and the\\n\" +\r\n                        \"faint, almost imperceptible whisper of something waiting.\");\r\n                System.out.println();\r\n                exitDoor.unlockDoor();\r\n            }\r\n        } else {\r\n            if (lever.getPosition().equalsIgnoreCase(\"up\")) {\r\n                System.out.println(ConsoleColors.RED+\"ACTION\"+ConsoleColors.RESET+\": You push the lever back up. It clicks into place with a sharp, metallic sound.\");\r\n            } else {\r\n                System.out.println(ConsoleColors.RED+\"ACTION\"+ConsoleColors.RESET+\": You pull down on the lever. It settles into place with a heavy clunk.\");\r\n                System.out.println(ConsoleColors.GREEN + \"PERCEPTION\" + ConsoleColors.RESET + \": A distant, rhythmic thud begins, like the heartbeat of some colossal machine. The sound fades, leaving the room in a silence that feels almost expectant.\");\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dev/java/game/Room.java b/src/dev/java/game/Room.java
--- a/src/dev/java/game/Room.java	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/src/dev/java/game/Room.java	(date 1741628802843)
@@ -16,6 +16,9 @@
     private String introBlurb = "UNDEFINED INTRO BLURB";
     private int roomPar = 0;
 
+    private boolean chooseRightEnding;
+
+
     public Room() {
         walls = new EnumMap<>(Main.Direction.class); // initializes map
 
@@ -24,6 +27,16 @@
         }
     }
 
+    public Room(boolean chooseRightEnding) {
+        walls = new EnumMap<>(Main.Direction.class); // initializes map
+
+        for (Main.Direction direction : Main.Direction.values()) {
+            walls.put(direction, new ArrayList<>());
+        }
+
+        this.chooseRightEnding = chooseRightEnding;
+    }
+
     public void setItem(Main.Direction direction, Item item) {
 
         // Adds item to wall specified by direction parameter
@@ -54,16 +67,30 @@
     public void SetExitDoor(Door exitDoor) {
         this.exitDoor = exitDoor;
     }
+
     public String getIntroBlurb() {
         return introBlurb;
     }
+
     public void setIntroBlurb(String introBlurb) {
         this.introBlurb = introBlurb;
     }
+
     public List<Item> getItemsAtDirection(Main.Direction direction) {
         return walls.get(direction); // gets items at the specified direction
     }
 
+    public List<Door> getDoorAtDirection(Main.Direction direction) {
+        List<Door> doors = new ArrayList<>();
+
+        for(Item item : walls.get(direction)) {
+            if(item instanceof Door) {
+                doors.add((Door)item);
+            }
+        }
+        return doors;
+    }
+
     public String describeItemsToPlayer(List<Item> items) {
         StringBuilder desc = new StringBuilder();
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"openjdk-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/.idea/misc.xml	(date 1741616445199)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d1dfdc85-7105-4882-9f55-0cb3ae09b9f8\" name=\"Changes\" comment=\"Some formatting corrections\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/logs/debug.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/logs/debug.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/dev/java/game/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/dev/java/game/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Blaqkstar&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Blaqkstar/EscapeRoomGame.git&quot;,\r\n    &quot;accountId&quot;: &quot;33bf5a69-71e6-4530-b179-74da27333e68&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2s0o67TPH45VjPp8LDj214eTk3q\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.QuickMain.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Application.ScoreDB.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/resources/derbyclient.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/src/main/java/org/example/Main.java&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"G:\\Personal\\School\\NWTC\\2025\\2025 Spring Semester\\8W1\\Java 2\\Group Project\\EscapeRoomGame\\Logging\" />\r\n      <recent name=\"G:\\Personal\\School\\NWTC\\2025\\2025 Spring Semester\\8W1\\Java 2\\Group Project\\EscapeRoomGame\\src\\dev\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\josia\\IdeaProjects\\EscapeRoomGame\\resources\" />\r\n      <recent name=\"G:\\Personal\\School\\NWTC\\2025\\2025 Spring Semester\\8W1\\Java 2\\Group Project\\EscapeRoomGame\\resources\" />\r\n      <recent name=\"G:\\Personal\\School\\NWTC\\2025\\2025 Spring Semester\\8W1\\Java 2\\Group Project\\EscapeRoomGame\\src\\main\\java\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-a94e463ab2e7-intellij.indexing.shared.core-IU-243.25659.59\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-IU-243.25659.59\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d1dfdc85-7105-4882-9f55-0cb3ae09b9f8\" name=\"Changes\" comment=\"\" />\r\n      <created>1737601676137</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1737601676137</updated>\r\n      <workItem from=\"1737601677089\" duration=\"1072000\" />\r\n      <workItem from=\"1737849600120\" duration=\"56000\" />\r\n      <workItem from=\"1737849841090\" duration=\"619000\" />\r\n      <workItem from=\"1737850628128\" duration=\"3451000\" />\r\n      <workItem from=\"1738106155603\" duration=\"115000\" />\r\n      <workItem from=\"1738106927247\" duration=\"1401000\" />\r\n      <workItem from=\"1738167915922\" duration=\"6141000\" />\r\n      <workItem from=\"1738199105426\" duration=\"8000\" />\r\n      <workItem from=\"1738202210730\" duration=\"1837000\" />\r\n      <workItem from=\"1738204764967\" duration=\"2000\" />\r\n      <workItem from=\"1738453709326\" duration=\"796000\" />\r\n      <workItem from=\"1739629190925\" duration=\"8304000\" />\r\n      <workItem from=\"1739672615482\" duration=\"4172000\" />\r\n      <workItem from=\"1740267770583\" duration=\"9205000\" />\r\n      <workItem from=\"1740515647885\" duration=\"3677000\" />\r\n      <workItem from=\"1740693369857\" duration=\"814000\" />\r\n      <workItem from=\"1740874126466\" duration=\"9906000\" />\r\n      <workItem from=\"1740886184220\" duration=\"12000\" />\r\n      <workItem from=\"1740897031310\" duration=\"39000\" />\r\n      <workItem from=\"1740937103305\" duration=\"1364000\" />\r\n      <workItem from=\"1740938649445\" duration=\"544000\" />\r\n      <workItem from=\"1741044499571\" duration=\"1236000\" />\r\n      <workItem from=\"1741127942394\" duration=\"804000\" />\r\n      <workItem from=\"1741217898217\" duration=\"4000\" />\r\n      <workItem from=\"1741218185937\" duration=\"23000\" />\r\n      <workItem from=\"1741270727293\" duration=\"8047000\" />\r\n      <workItem from=\"1741288699428\" duration=\"16047000\" />\r\n      <workItem from=\"1741313647426\" duration=\"4334000\" />\r\n      <workItem from=\"1741392002382\" duration=\"1632000\" />\r\n      <workItem from=\"1741411082479\" duration=\"3442000\" />\r\n      <workItem from=\"1741458159030\" duration=\"12511000\" />\r\n      <workItem from=\"1741474640677\" duration=\"5086000\" />\r\n      <workItem from=\"1741566431544\" duration=\"10001000\" />\r\n      <workItem from=\"1741577504601\" duration=\"1311000\" />\r\n      <workItem from=\"1741578857730\" duration=\"56000\" />\r\n      <workItem from=\"1741579288063\" duration=\"202000\" />\r\n      <workItem from=\"1741579673046\" duration=\"227000\" />\r\n      <workItem from=\"1741580422214\" duration=\"3552000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"starting point\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737601738920</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737601738920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"moved main.java into correct folder\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737850767623</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737850767623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Worked on finishing the system for moving the player between rooms. I had to rework some of the exit door code, but now have it working properly. Cheers!\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740002342595</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740002342595</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Worked on finishing the system for our assignment 5 by implementing a Comparable and Comparator in the high scores system.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740276621147</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740276621148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Got my changes finished which implement the RoomSetup Class to streamline room creation. Hope you guys like it!\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740694157327</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740694157327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Fixed Transmorgrifier interaction menu loop to behave as expected.&#10;Modified Room.describeItemsToPlayer to include a grammar formatter&#10;Cleaned up perceptual feedback output generally. Debug output is now purple, and any time the player receives some kind of perceptual feedback, it is now preceded by an 'PERCEPTION' indicator. &#10;Grouped up debug messages and created space between them and perceptual feedback&#10;Changed 'highscores' command to 'hiscores' to reduce player keystroke requirements&#10;Changed MakeRoom method naming conventions to allow for greater uniformity in our method calls (syntax is now MakeRoom_RoomName)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740895307939</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740895307939</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Some further cleanup work to diegetic feedback to improve player experience and readability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740896618456</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740896618456</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Some further (I swear to god actual final update of the night) cleanup work to diegetic feedback to improve player experience and readability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740896893797</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740896893797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Some additional narrative output spacing cleanup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740938436485</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740938436485</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Color-coded usable items in tutorial room descriptions\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740939100455</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740939100455</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Added option to speedrun the first room for purposes of developing lab\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1740963310574</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1740963310574</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Implemented some very slightly different item handling to ref. item instead of name where relevant&#10;Implemented Observer pattern to compare relative toggled status of Conservatory levers&#10;Fixed usable item coloring of key in Tutorial Room&#10;Added some additional debug feedback for item usage info\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741275603287</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741275603287</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Fixed spacing of debug messages relative to diegetic feedback\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741278789925</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741278789925</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Added Lantern, LargePortrait, Orrery, and Phonograph item stubs. Began finishing touches on Conservatory room decoration/props and puzzle clues. &#10;Implemented a series of conditional checks to correctly determine the next room based on the room the player is in when they interact with the exit door\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741306271244</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741306271244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Got player score incrementing appropriately for relevant successful actions. &#10;Implemented a method to print player score&#10;Updated help method with new 'score' command\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741311359917</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741311359917</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Added introBlurb, setIntroBlurb(), and getIntroBlurb() to Room class&#10;Created intro for Conservatory\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741313321768</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741313321768</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Created Phonograph use() behavior and added to Conservatory room constructor. &#10;Added some door use() behavior specific to Tutorial Room.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741385056338</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741385056338</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Fixed bug where Tutorial Room door could be opened when it should be perma-locked\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741386584657</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741386584657</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Fixed door interactivity issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741392195378</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741392195378</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Fixed some text formatting inconsistencies&#10;Created placeholder gameOver() method&#10;Created lose conditions (player score exceeds predefined gameOverScore)&#10;Created some logic after game over to ask player if they'd like to play again\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741414310942</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741414310942</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Fixed some text formatting inconsistencies\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741414537143</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741414537143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Built out gameOver() method&#10;Clarified failure conditions&#10;Created a variable in Room called roomPar (with relevant getter/setter) that is used to determine gameOverScore. If player score exceeds gameOverScore, gameOver() is called. &#10;Cleaned up some more output text\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741469331246</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741469331246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Additional text cleanup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741469476721</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741469476721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Got painting description and inspection updating to properly reflect diegetic changes after player 'uses' it.&#10;Fixed bug where player could spawn an infinite number of keys from behind the painting.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741470674032</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741470674032</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"updated TODO list to account for work I just did\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741470762753</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741470762753</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Abstracted logic to set game over score into its own method, setGameOverScore()\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741471046270</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741471046270</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Came up with a better placeholder name, pending group feedback.&#10;Added placeholder for about command&#10;Updated title font&#10;Some additional text output cleanup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741476294225</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741476294225</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Embellished the lever success/failure messages to fit the vibe of the game.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741545554008</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741545554008</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Got Conservatory padded out with first pass of all its flavor items&#10;Removed Room from the constructor of a couple of the item child classes that didn't need to know about room details.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741569853868</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741569853868</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Added final two items (diary, corpse) to Conservatory\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741572534626</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741572534626</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Forgot to turn playIntro() back on\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741572647404</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741572647404</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Cleaned up diary and corpse text output\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741573149246</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741573149246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Cleaned up diary and corpse text output\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741573177035</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741573177035</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"Lots more narrative output cleanup\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741576478491</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741576478491</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"Some more narrative text output cleanup&#10;Implemented background music\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741582684598</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741582684598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"Some more narrative text output cleanup&#10;Implemented background music\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741583355520</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741583355520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Some more narrative text output cleanup&#10;Implemented background music\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741586599075</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741586599075</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"removed audio debug message from game start. figured issue out.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741587506936</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741587506936</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Fixed some lever output text logic&#10;Cleaned up some more narrative output text\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741591309369</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741591309369</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Forgot to re-enable intro\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741591417268</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741591417268</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"Some formatting corrections\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741592825055</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741592825055</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"42\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added Lantern, LargePortrait, Orrery, and Phonograph item stubs. Began finishing touches on Conservatory room decoration/props and puzzle clues. &#10;Implemented a series of conditional checks to correctly determine the next room based on the room the player is in when they interact with the exit door\" />\r\n    <MESSAGE value=\"Got player score incrementing appropriately for relevant successful actions. &#10;Implemented a method to print player score&#10;Updated help method with new 'score' command\" />\r\n    <MESSAGE value=\"Added introBlurb, setIntroBlurb(), and getIntroBlurb() to Room class&#10;Created intro for Conservatory\" />\r\n    <MESSAGE value=\"Created Phonograph use() behavior and added to Conservatory room constructor. &#10;Added some door use() behavior specific to Tutorial Room.\" />\r\n    <MESSAGE value=\"Fixed bug where Tutorial Room door could be opened when it should be perma-locked\" />\r\n    <MESSAGE value=\"Fixed door interactivity issue\" />\r\n    <MESSAGE value=\"Fixed some text formatting inconsistencies&#10;Created placeholder gameOver() method&#10;Created lose conditions (player score exceeds predefined gameOverScore)&#10;Created some logic after game over to ask player if they'd like to play again\" />\r\n    <MESSAGE value=\"Fixed some text formatting inconsistencies\" />\r\n    <MESSAGE value=\"Built out gameOver() method&#10;Clarified failure conditions&#10;Created a variable in Room called roomPar (with relevant getter/setter) that is used to determine gameOverScore. If player score exceeds gameOverScore, gameOver() is called. &#10;Cleaned up some more output text\" />\r\n    <MESSAGE value=\"Additional text cleanup\" />\r\n    <MESSAGE value=\"Got painting description and inspection updating to properly reflect diegetic changes after player 'uses' it.&#10;Fixed bug where player could spawn an infinite number of keys from behind the painting.\" />\r\n    <MESSAGE value=\"updated TODO list to account for work I just did\" />\r\n    <MESSAGE value=\"Abstracted logic to set game over score into its own method, setGameOverScore()\" />\r\n    <MESSAGE value=\"Came up with a better placeholder name, pending group feedback.&#10;Added placeholder for about command&#10;Updated title font&#10;Some additional text output cleanup\" />\r\n    <MESSAGE value=\"Embellished the lever success/failure messages to fit the vibe of the game.\" />\r\n    <MESSAGE value=\"Got Conservatory padded out with first pass of all its flavor items&#10;Removed Room from the constructor of a couple of the item child classes that didn't need to know about room details.\" />\r\n    <MESSAGE value=\"Added final two items (diary, corpse) to Conservatory\" />\r\n    <MESSAGE value=\"Forgot to turn playIntro() back on\" />\r\n    <MESSAGE value=\"Cleaned up diary and corpse text output\" />\r\n    <MESSAGE value=\"Lots more narrative output cleanup\" />\r\n    <MESSAGE value=\"Some more narrative text output cleanup&#10;Implemented background music\" />\r\n    <MESSAGE value=\"removed audio debug message from game start. figured issue out.\" />\r\n    <MESSAGE value=\"Fixed some lever output text logic&#10;Cleaned up some more narrative output text\" />\r\n    <MESSAGE value=\"Forgot to re-enable intro\" />\r\n    <MESSAGE value=\"Some formatting corrections\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Some formatting corrections\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/Main.java</url>\r\n          <line>13</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <watches-manager>\r\n      <configuration name=\"Application\">\r\n        <watch expression=\"gameOverScore\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision aa94c23819ab3f0648f1f74153414a2b9a96c850)
+++ b/.idea/workspace.xml	(date 1741627451108)
@@ -5,9 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="d1dfdc85-7105-4882-9f55-0cb3ae09b9f8" name="Changes" comment="Some formatting corrections">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/logs/debug.log" beforeDir="false" afterPath="$PROJECT_DIR$/logs/debug.log" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/dev/java/game/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/dev/java/game/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/dev/java/game/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/dev/java/game/Player.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/dev/java/game/Room.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/dev/java/game/Room.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/dev/java/game/RoomSetup.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/dev/java/game/RoomSetup.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -54,30 +57,30 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
-    &quot;Application.QuickMain.executor&quot;: &quot;Debug&quot;,
-    &quot;Application.ScoreDB.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/resources/derbyclient.jar&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;onboarding.tips.debug.path&quot;: &quot;G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/src/main/java/org/example/Main.java&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.Main.executor": "Run",
+    "Application.QuickMain.executor": "Debug",
+    "Application.ScoreDB.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.git.unshallow": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "dev",
+    "ignore.virus.scanning.warn.message": "true",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/resources/derbyclient.jar",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "onboarding.tips.debug.path": "G:/Personal/School/NWTC/2025/2025 Spring Semester/8W1/Java 2/Group Project/EscapeRoomGame/src/main/java/org/example/Main.java",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="G:\Personal\School\NWTC\2025\2025 Spring Semester\8W1\Java 2\Group Project\EscapeRoomGame\Logging" />
